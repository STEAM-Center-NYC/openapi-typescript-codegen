{{>header}}

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { OpenAPIConfig } from './OpenAPI';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/isSuccess}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>fetch/getHeaders}}


{{>xhr/getRequestBody}}


{{>xhr/sendRequest}}


{{>xhr/getResponseHeader}}


{{>xhr/getResponseBody}}


{{>functions/catchErrorCodes}}


/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns Promise<T>
 * @throws ApiError
 */
export const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): Promise<T> => {
	return new Promise(async (resolve, reject) => {
		try {
			const url = getUrl(config, options);
			const formData = getFormData(options);
			const body = getRequestBody(options);
			const headers = await getHeaders(config, options);

			const response = await sendRequest(config, options, url, body, formData, headers);
			const responseBody = getResponseBody(response);
			const responseHeader = getResponseHeader(response, options.responseHeader);

			const result: ApiResult = {
				url,
				ok: isSuccess(response.status),
				status: response.status,
				statusText: response.statusText,
				body: responseHeader ?? responseBody,
			};

			catchErrorCodes(options, result);

			resolve(result.body);
		} catch (error) {
			reject(error);
		}
	});
};
